// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace WebKit {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;
	using static GLib.AbiStructExtension;

#region Autogenerated code
	public partial class EditorState : GLib.Object {

		public EditorState (IntPtr raw) : base(raw) {}

		protected EditorState() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate uint d_webkit_editor_state_get_typing_attributes(IntPtr raw);
		static d_webkit_editor_state_get_typing_attributes webkit_editor_state_get_typing_attributes = FuncLoader.LoadFunction<d_webkit_editor_state_get_typing_attributes>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_editor_state_get_typing_attributes"));

		[GLib.Property ("typing-attributes")]
		public uint TypingAttributes {
			get  {
				uint raw_ret = webkit_editor_state_get_typing_attributes(Handle);
				uint ret = raw_ret;
				return ret;
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public unsafe new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("_webkit_reserved0"
							, GLib.Object.class_abi.Fields
							, (uint) sizeof( IntPtr ) // _webkit_reserved0
							, null
							, "_webkit_reserved1"
							, (uint) sizeof(IntPtr)
							, 0
							),
						new GLib.AbiField("_webkit_reserved1"
							, -1
							, (uint) sizeof( IntPtr ) // _webkit_reserved1
							, "_webkit_reserved0"
							, "_webkit_reserved2"
							, (uint) sizeof(IntPtr)
							, 0
							),
						new GLib.AbiField("_webkit_reserved2"
							, -1
							, (uint) sizeof( IntPtr ) // _webkit_reserved2
							, "_webkit_reserved1"
							, "_webkit_reserved3"
							, (uint) sizeof(IntPtr)
							, 0
							),
						new GLib.AbiField("_webkit_reserved3"
							, -1
							, (uint) sizeof( IntPtr ) // _webkit_reserved3
							, "_webkit_reserved2"
							, null
							, (uint) sizeof(IntPtr)
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_webkit_editor_state_get_type();
		static d_webkit_editor_state_get_type webkit_editor_state_get_type = FuncLoader.LoadFunction<d_webkit_editor_state_get_type>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_editor_state_get_type"));

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = webkit_editor_state_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_webkit_editor_state_is_copy_available(IntPtr raw);
		static d_webkit_editor_state_is_copy_available webkit_editor_state_is_copy_available = FuncLoader.LoadFunction<d_webkit_editor_state_is_copy_available>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_editor_state_is_copy_available"));

		public bool IsCopyAvailable { 
			get {
				bool raw_ret = webkit_editor_state_is_copy_available(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_webkit_editor_state_is_cut_available(IntPtr raw);
		static d_webkit_editor_state_is_cut_available webkit_editor_state_is_cut_available = FuncLoader.LoadFunction<d_webkit_editor_state_is_cut_available>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_editor_state_is_cut_available"));

		public bool IsCutAvailable { 
			get {
				bool raw_ret = webkit_editor_state_is_cut_available(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_webkit_editor_state_is_paste_available(IntPtr raw);
		static d_webkit_editor_state_is_paste_available webkit_editor_state_is_paste_available = FuncLoader.LoadFunction<d_webkit_editor_state_is_paste_available>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_editor_state_is_paste_available"));

		public bool IsPasteAvailable { 
			get {
				bool raw_ret = webkit_editor_state_is_paste_available(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_webkit_editor_state_is_redo_available(IntPtr raw);
		static d_webkit_editor_state_is_redo_available webkit_editor_state_is_redo_available = FuncLoader.LoadFunction<d_webkit_editor_state_is_redo_available>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_editor_state_is_redo_available"));

		public bool IsRedoAvailable { 
			get {
				bool raw_ret = webkit_editor_state_is_redo_available(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_webkit_editor_state_is_undo_available(IntPtr raw);
		static d_webkit_editor_state_is_undo_available webkit_editor_state_is_undo_available = FuncLoader.LoadFunction<d_webkit_editor_state_is_undo_available>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_editor_state_is_undo_available"));

		public bool IsUndoAvailable { 
			get {
				bool raw_ret = webkit_editor_state_is_undo_available(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}


		static EditorState ()
		{
			GtkSharp.WebkitGtkSharp.ObjectManager.Initialize ();
		}

		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public unsafe new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("priv"
							, GLib.Object.abi_info.Fields
							, (uint) sizeof( IntPtr ) // priv
							, null
							, null
							, (uint) sizeof(IntPtr)
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
