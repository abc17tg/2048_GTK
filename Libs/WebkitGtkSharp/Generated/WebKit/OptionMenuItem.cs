// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace WebKit {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct OptionMenuItem : IEquatable<OptionMenuItem> {


		public static WebKit.OptionMenuItem Zero = new WebKit.OptionMenuItem ();

		public static WebKit.OptionMenuItem New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return WebKit.OptionMenuItem.Zero;
			return (WebKit.OptionMenuItem) Marshal.PtrToStructure (raw, typeof (WebKit.OptionMenuItem));
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_webkit_option_menu_item_get_type();
		static d_webkit_option_menu_item_get_type webkit_option_menu_item_get_type = FuncLoader.LoadFunction<d_webkit_option_menu_item_get_type>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_option_menu_item_get_type"));

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = webkit_option_menu_item_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_webkit_option_menu_item_get_label(IntPtr raw);
		static d_webkit_option_menu_item_get_label webkit_option_menu_item_get_label = FuncLoader.LoadFunction<d_webkit_option_menu_item_get_label>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_option_menu_item_get_label"));

		public string Label { 
			get {
				IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf<WebKit.OptionMenuItem>());
				System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
				IntPtr raw_ret = webkit_option_menu_item_get_label(this_as_native);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				ReadNative (this_as_native, ref this);
				System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_webkit_option_menu_item_get_tooltip(IntPtr raw);
		static d_webkit_option_menu_item_get_tooltip webkit_option_menu_item_get_tooltip = FuncLoader.LoadFunction<d_webkit_option_menu_item_get_tooltip>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_option_menu_item_get_tooltip"));

		public string Tooltip { 
			get {
				IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf<WebKit.OptionMenuItem>());
				System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
				IntPtr raw_ret = webkit_option_menu_item_get_tooltip(this_as_native);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				ReadNative (this_as_native, ref this);
				System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_webkit_option_menu_item_is_enabled(IntPtr raw);
		static d_webkit_option_menu_item_is_enabled webkit_option_menu_item_is_enabled = FuncLoader.LoadFunction<d_webkit_option_menu_item_is_enabled>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_option_menu_item_is_enabled"));

		public bool IsEnabled { 
			get {
				IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf<WebKit.OptionMenuItem>());
				System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
				bool raw_ret = webkit_option_menu_item_is_enabled(this_as_native);
				bool ret = raw_ret;
				ReadNative (this_as_native, ref this);
				System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_webkit_option_menu_item_is_group_child(IntPtr raw);
		static d_webkit_option_menu_item_is_group_child webkit_option_menu_item_is_group_child = FuncLoader.LoadFunction<d_webkit_option_menu_item_is_group_child>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_option_menu_item_is_group_child"));

		public bool IsGroupChild { 
			get {
				IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf<WebKit.OptionMenuItem>());
				System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
				bool raw_ret = webkit_option_menu_item_is_group_child(this_as_native);
				bool ret = raw_ret;
				ReadNative (this_as_native, ref this);
				System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_webkit_option_menu_item_is_group_label(IntPtr raw);
		static d_webkit_option_menu_item_is_group_label webkit_option_menu_item_is_group_label = FuncLoader.LoadFunction<d_webkit_option_menu_item_is_group_label>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_option_menu_item_is_group_label"));

		public bool IsGroupLabel { 
			get {
				IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf<WebKit.OptionMenuItem>());
				System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
				bool raw_ret = webkit_option_menu_item_is_group_label(this_as_native);
				bool ret = raw_ret;
				ReadNative (this_as_native, ref this);
				System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_webkit_option_menu_item_is_selected(IntPtr raw);
		static d_webkit_option_menu_item_is_selected webkit_option_menu_item_is_selected = FuncLoader.LoadFunction<d_webkit_option_menu_item_is_selected>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_option_menu_item_is_selected"));

		public bool IsSelected { 
			get {
				IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf<WebKit.OptionMenuItem>());
				System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
				bool raw_ret = webkit_option_menu_item_is_selected(this_as_native);
				bool ret = raw_ret;
				ReadNative (this_as_native, ref this);
				System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
				return ret;
			}
		}

		static void ReadNative (IntPtr native, ref WebKit.OptionMenuItem target)
		{
			target = New (native);
		}

		public bool Equals (OptionMenuItem other)
		{
			return true;
		}

		public override bool Equals (object other)
		{
			return other is OptionMenuItem && Equals ((OptionMenuItem) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode ();
		}

		public static explicit operator GLib.Value (WebKit.OptionMenuItem boxed)
		{
			GLib.Value val = GLib.Value.Empty;
			val.Init (WebKit.OptionMenuItem.GType);
			val.Val = boxed;
			return val;
		}

		public static explicit operator WebKit.OptionMenuItem (GLib.Value val)
		{
			return (WebKit.OptionMenuItem) val.Val;
		}
#endregion
	}
}
