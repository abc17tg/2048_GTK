// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace WebKit {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;
	using static GLib.AbiStructExtension;

#region Autogenerated code
	public partial class WebsiteDataManager : GLib.Object {

		public WebsiteDataManager (IntPtr raw) : base(raw) {}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_webkit_website_data_manager_new_ephemeral();
		static d_webkit_website_data_manager_new_ephemeral webkit_website_data_manager_new_ephemeral = FuncLoader.LoadFunction<d_webkit_website_data_manager_new_ephemeral>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_website_data_manager_new_ephemeral"));

		public WebsiteDataManager () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (WebsiteDataManager)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = webkit_website_data_manager_new_ephemeral();
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_webkit_website_data_manager_get_base_cache_directory(IntPtr raw);
		static d_webkit_website_data_manager_get_base_cache_directory webkit_website_data_manager_get_base_cache_directory = FuncLoader.LoadFunction<d_webkit_website_data_manager_get_base_cache_directory>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_website_data_manager_get_base_cache_directory"));

		[GLib.Property ("base-cache-directory")]
		public string BaseCacheDirectory {
			get  {
				IntPtr raw_ret = webkit_website_data_manager_get_base_cache_directory(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_webkit_website_data_manager_get_base_data_directory(IntPtr raw);
		static d_webkit_website_data_manager_get_base_data_directory webkit_website_data_manager_get_base_data_directory = FuncLoader.LoadFunction<d_webkit_website_data_manager_get_base_data_directory>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_website_data_manager_get_base_data_directory"));

		[GLib.Property ("base-data-directory")]
		public string BaseDataDirectory {
			get  {
				IntPtr raw_ret = webkit_website_data_manager_get_base_data_directory(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_webkit_website_data_manager_get_disk_cache_directory(IntPtr raw);
		static d_webkit_website_data_manager_get_disk_cache_directory webkit_website_data_manager_get_disk_cache_directory = FuncLoader.LoadFunction<d_webkit_website_data_manager_get_disk_cache_directory>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_website_data_manager_get_disk_cache_directory"));

		[GLib.Property ("disk-cache-directory")]
		public string DiskCacheDirectory {
			get  {
				IntPtr raw_ret = webkit_website_data_manager_get_disk_cache_directory(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_webkit_website_data_manager_get_dom_cache_directory(IntPtr raw);
		static d_webkit_website_data_manager_get_dom_cache_directory webkit_website_data_manager_get_dom_cache_directory = FuncLoader.LoadFunction<d_webkit_website_data_manager_get_dom_cache_directory>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_website_data_manager_get_dom_cache_directory"));

		[GLib.Property ("dom-cache-directory")]
		public string DomCacheDirectory {
			get  {
				IntPtr raw_ret = webkit_website_data_manager_get_dom_cache_directory(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_webkit_website_data_manager_get_hsts_cache_directory(IntPtr raw);
		static d_webkit_website_data_manager_get_hsts_cache_directory webkit_website_data_manager_get_hsts_cache_directory = FuncLoader.LoadFunction<d_webkit_website_data_manager_get_hsts_cache_directory>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_website_data_manager_get_hsts_cache_directory"));

		[GLib.Property ("hsts-cache-directory")]
		public string HstsCacheDirectory {
			get  {
				IntPtr raw_ret = webkit_website_data_manager_get_hsts_cache_directory(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_webkit_website_data_manager_get_indexeddb_directory(IntPtr raw);
		static d_webkit_website_data_manager_get_indexeddb_directory webkit_website_data_manager_get_indexeddb_directory = FuncLoader.LoadFunction<d_webkit_website_data_manager_get_indexeddb_directory>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_website_data_manager_get_indexeddb_directory"));

		[GLib.Property ("indexeddb-directory")]
		public string IndexeddbDirectory {
			get  {
				IntPtr raw_ret = webkit_website_data_manager_get_indexeddb_directory(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[GLib.Property ("is-ephemeral")]
		public bool IsEphemeralProp
       {
			get {
				GLib.Value val = GetProperty ("is-ephemeral");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_webkit_website_data_manager_get_itp_directory(IntPtr raw);
		static d_webkit_website_data_manager_get_itp_directory webkit_website_data_manager_get_itp_directory = FuncLoader.LoadFunction<d_webkit_website_data_manager_get_itp_directory>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_website_data_manager_get_itp_directory"));

		[GLib.Property ("itp-directory")]
		public string ItpDirectory {
			get  {
				IntPtr raw_ret = webkit_website_data_manager_get_itp_directory(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_webkit_website_data_manager_get_local_storage_directory(IntPtr raw);
		static d_webkit_website_data_manager_get_local_storage_directory webkit_website_data_manager_get_local_storage_directory = FuncLoader.LoadFunction<d_webkit_website_data_manager_get_local_storage_directory>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_website_data_manager_get_local_storage_directory"));

		[GLib.Property ("local-storage-directory")]
		public string LocalStorageDirectory {
			get  {
				IntPtr raw_ret = webkit_website_data_manager_get_local_storage_directory(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_webkit_website_data_manager_get_offline_application_cache_directory(IntPtr raw);
		static d_webkit_website_data_manager_get_offline_application_cache_directory webkit_website_data_manager_get_offline_application_cache_directory = FuncLoader.LoadFunction<d_webkit_website_data_manager_get_offline_application_cache_directory>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_website_data_manager_get_offline_application_cache_directory"));

		[GLib.Property ("offline-application-cache-directory")]
		public string OfflineApplicationCacheDirectory {
			get  {
				IntPtr raw_ret = webkit_website_data_manager_get_offline_application_cache_directory(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_webkit_website_data_manager_get_service_worker_registrations_directory(IntPtr raw);
		static d_webkit_website_data_manager_get_service_worker_registrations_directory webkit_website_data_manager_get_service_worker_registrations_directory = FuncLoader.LoadFunction<d_webkit_website_data_manager_get_service_worker_registrations_directory>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_website_data_manager_get_service_worker_registrations_directory"));

		[GLib.Property ("service-worker-registrations-directory")]
		public string ServiceWorkerRegistrationsDirectory {
			get  {
				IntPtr raw_ret = webkit_website_data_manager_get_service_worker_registrations_directory(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_webkit_website_data_manager_get_websql_directory(IntPtr raw);
		static d_webkit_website_data_manager_get_websql_directory webkit_website_data_manager_get_websql_directory = FuncLoader.LoadFunction<d_webkit_website_data_manager_get_websql_directory>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_website_data_manager_get_websql_directory"));

		[Obsolete]
		[GLib.Property ("websql-directory")]
		public string WebsqlDirectory {
			get  {
				IntPtr raw_ret = webkit_website_data_manager_get_websql_directory(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public unsafe new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("_webkit_reserved0"
							, GLib.Object.class_abi.Fields
							, (uint) sizeof( IntPtr ) // _webkit_reserved0
							, null
							, "_webkit_reserved1"
							, (uint) sizeof(IntPtr)
							, 0
							),
						new GLib.AbiField("_webkit_reserved1"
							, -1
							, (uint) sizeof( IntPtr ) // _webkit_reserved1
							, "_webkit_reserved0"
							, "_webkit_reserved2"
							, (uint) sizeof(IntPtr)
							, 0
							),
						new GLib.AbiField("_webkit_reserved2"
							, -1
							, (uint) sizeof( IntPtr ) // _webkit_reserved2
							, "_webkit_reserved1"
							, "_webkit_reserved3"
							, (uint) sizeof(IntPtr)
							, 0
							),
						new GLib.AbiField("_webkit_reserved3"
							, -1
							, (uint) sizeof( IntPtr ) // _webkit_reserved3
							, "_webkit_reserved2"
							, null
							, (uint) sizeof(IntPtr)
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_webkit_website_data_manager_get_type();
		static d_webkit_website_data_manager_get_type webkit_website_data_manager_get_type = FuncLoader.LoadFunction<d_webkit_website_data_manager_get_type>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_website_data_manager_get_type"));

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = webkit_website_data_manager_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_webkit_website_data_manager_clear_finish(IntPtr raw, IntPtr _result, out IntPtr error);
		static d_webkit_website_data_manager_clear_finish webkit_website_data_manager_clear_finish = FuncLoader.LoadFunction<d_webkit_website_data_manager_clear_finish>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_website_data_manager_clear_finish"));

		public unsafe bool ClearFinish(GLib.IAsyncResult _result) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = webkit_website_data_manager_clear_finish(Handle, _result == null ? IntPtr.Zero : ((_result is GLib.Object) ? (_result as GLib.Object).Handle : (_result as GLib.AsyncResultAdapter).Handle), out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_webkit_website_data_manager_fetch(IntPtr raw, int types, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);
		static d_webkit_website_data_manager_fetch webkit_website_data_manager_fetch = FuncLoader.LoadFunction<d_webkit_website_data_manager_fetch>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_website_data_manager_fetch"));

		public void Fetch(WebKit.WebsiteDataTypes types, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb) {
			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			webkit_website_data_manager_fetch(Handle, (int) types, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		public void Fetch(WebKit.WebsiteDataTypes types) {
			Fetch (types, null, null);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_webkit_website_data_manager_fetch_finish(IntPtr raw, IntPtr _result, out IntPtr error);
		static d_webkit_website_data_manager_fetch_finish webkit_website_data_manager_fetch_finish = FuncLoader.LoadFunction<d_webkit_website_data_manager_fetch_finish>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_website_data_manager_fetch_finish"));

		public unsafe GLib.List[] FetchFinish(GLib.IAsyncResult _result) {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = webkit_website_data_manager_fetch_finish(Handle, _result == null ? IntPtr.Zero : ((_result is GLib.Object) ? (_result as GLib.Object).Handle : (_result as GLib.AsyncResultAdapter).Handle), out error);
			GLib.List[] ret = GLib.Marshaller.ListPtrToArray<GLib.List, GLib.List> (raw_ret, true, true);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_webkit_website_data_manager_get_cookie_manager(IntPtr raw);
		static d_webkit_website_data_manager_get_cookie_manager webkit_website_data_manager_get_cookie_manager = FuncLoader.LoadFunction<d_webkit_website_data_manager_get_cookie_manager>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_website_data_manager_get_cookie_manager"));

		public WebKit.CookieManager CookieManager { 
			get {
				IntPtr raw_ret = webkit_website_data_manager_get_cookie_manager(Handle);
				WebKit.CookieManager ret = GLib.Object.GetObject(raw_ret) as WebKit.CookieManager;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_webkit_website_data_manager_get_itp_enabled(IntPtr raw);
		static d_webkit_website_data_manager_get_itp_enabled webkit_website_data_manager_get_itp_enabled = FuncLoader.LoadFunction<d_webkit_website_data_manager_get_itp_enabled>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_website_data_manager_get_itp_enabled"));

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_webkit_website_data_manager_set_itp_enabled(IntPtr raw, bool enabled);
		static d_webkit_website_data_manager_set_itp_enabled webkit_website_data_manager_set_itp_enabled = FuncLoader.LoadFunction<d_webkit_website_data_manager_set_itp_enabled>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_website_data_manager_set_itp_enabled"));

		public bool ItpEnabled { 
			get {
				bool raw_ret = webkit_website_data_manager_get_itp_enabled(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				webkit_website_data_manager_set_itp_enabled(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_webkit_website_data_manager_get_itp_summary(IntPtr raw, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);
		static d_webkit_website_data_manager_get_itp_summary webkit_website_data_manager_get_itp_summary = FuncLoader.LoadFunction<d_webkit_website_data_manager_get_itp_summary>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_website_data_manager_get_itp_summary"));

		public void GetItpSummary(GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb) {
			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			webkit_website_data_manager_get_itp_summary(Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		public void GetItpSummary() {
			GetItpSummary (null, null);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_webkit_website_data_manager_get_itp_summary_finish(IntPtr raw, IntPtr _result, out IntPtr error);
		static d_webkit_website_data_manager_get_itp_summary_finish webkit_website_data_manager_get_itp_summary_finish = FuncLoader.LoadFunction<d_webkit_website_data_manager_get_itp_summary_finish>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_website_data_manager_get_itp_summary_finish"));

		public unsafe GLib.List[] GetItpSummaryFinish(GLib.IAsyncResult _result) {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = webkit_website_data_manager_get_itp_summary_finish(Handle, _result == null ? IntPtr.Zero : ((_result is GLib.Object) ? (_result as GLib.Object).Handle : (_result as GLib.AsyncResultAdapter).Handle), out error);
			GLib.List[] ret = GLib.Marshaller.ListPtrToArray<GLib.List, GLib.List> (raw_ret, true, true);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_webkit_website_data_manager_get_persistent_credential_storage_enabled(IntPtr raw);
		static d_webkit_website_data_manager_get_persistent_credential_storage_enabled webkit_website_data_manager_get_persistent_credential_storage_enabled = FuncLoader.LoadFunction<d_webkit_website_data_manager_get_persistent_credential_storage_enabled>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_website_data_manager_get_persistent_credential_storage_enabled"));

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_webkit_website_data_manager_set_persistent_credential_storage_enabled(IntPtr raw, bool enabled);
		static d_webkit_website_data_manager_set_persistent_credential_storage_enabled webkit_website_data_manager_set_persistent_credential_storage_enabled = FuncLoader.LoadFunction<d_webkit_website_data_manager_set_persistent_credential_storage_enabled>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_website_data_manager_set_persistent_credential_storage_enabled"));

		public bool PersistentCredentialStorageEnabled { 
			get {
				bool raw_ret = webkit_website_data_manager_get_persistent_credential_storage_enabled(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				webkit_website_data_manager_set_persistent_credential_storage_enabled(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int d_webkit_website_data_manager_get_tls_errors_policy(IntPtr raw);
		static d_webkit_website_data_manager_get_tls_errors_policy webkit_website_data_manager_get_tls_errors_policy = FuncLoader.LoadFunction<d_webkit_website_data_manager_get_tls_errors_policy>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_website_data_manager_get_tls_errors_policy"));

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_webkit_website_data_manager_set_tls_errors_policy(IntPtr raw, int policy);
		static d_webkit_website_data_manager_set_tls_errors_policy webkit_website_data_manager_set_tls_errors_policy = FuncLoader.LoadFunction<d_webkit_website_data_manager_set_tls_errors_policy>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_website_data_manager_set_tls_errors_policy"));

		public WebKit.TLSErrorsPolicy TlsErrorsPolicy { 
			get {
				int raw_ret = webkit_website_data_manager_get_tls_errors_policy(Handle);
				WebKit.TLSErrorsPolicy ret = (WebKit.TLSErrorsPolicy) raw_ret;
				return ret;
			}
			set {
				webkit_website_data_manager_set_tls_errors_policy(Handle, (int) value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_webkit_website_data_manager_is_ephemeral(IntPtr raw);
		static d_webkit_website_data_manager_is_ephemeral webkit_website_data_manager_is_ephemeral = FuncLoader.LoadFunction<d_webkit_website_data_manager_is_ephemeral>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_website_data_manager_is_ephemeral"));

		public bool IsEphemeral { 
			get {
				bool raw_ret = webkit_website_data_manager_is_ephemeral(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_webkit_website_data_manager_remove(IntPtr raw, int types, IntPtr website_data, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);
		static d_webkit_website_data_manager_remove webkit_website_data_manager_remove = FuncLoader.LoadFunction<d_webkit_website_data_manager_remove>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_website_data_manager_remove"));

		public void Remove(WebKit.WebsiteDataTypes types, GLib.List website_data, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb) {
			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			webkit_website_data_manager_remove(Handle, (int) types, website_data == null ? IntPtr.Zero : website_data.Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		public void Remove(WebKit.WebsiteDataTypes types, GLib.List website_data) {
			Remove (types, website_data, null, null);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_webkit_website_data_manager_remove_finish(IntPtr raw, IntPtr _result, out IntPtr error);
		static d_webkit_website_data_manager_remove_finish webkit_website_data_manager_remove_finish = FuncLoader.LoadFunction<d_webkit_website_data_manager_remove_finish>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_website_data_manager_remove_finish"));

		public unsafe bool RemoveFinish(GLib.IAsyncResult _result) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = webkit_website_data_manager_remove_finish(Handle, _result == null ? IntPtr.Zero : ((_result is GLib.Object) ? (_result as GLib.Object).Handle : (_result as GLib.AsyncResultAdapter).Handle), out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_webkit_website_data_manager_set_network_proxy_settings(IntPtr raw, int proxy_mode, IntPtr proxy_settings);
		static d_webkit_website_data_manager_set_network_proxy_settings webkit_website_data_manager_set_network_proxy_settings = FuncLoader.LoadFunction<d_webkit_website_data_manager_set_network_proxy_settings>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_website_data_manager_set_network_proxy_settings"));

		public void SetNetworkProxySettings(WebKit.NetworkProxyMode proxy_mode, WebKit.NetworkProxySettings proxy_settings) {
			IntPtr native_proxy_settings = GLib.Marshaller.StructureToPtrAlloc (proxy_settings);
			webkit_website_data_manager_set_network_proxy_settings(Handle, (int) proxy_mode, native_proxy_settings);
			Marshal.FreeHGlobal (native_proxy_settings);
		}

		public void SetNetworkProxySettings(WebKit.NetworkProxyMode proxy_mode) {
			SetNetworkProxySettings (proxy_mode, WebKit.NetworkProxySettings.Zero);
		}


		static WebsiteDataManager ()
		{
			GtkSharp.WebkitGtkSharp.ObjectManager.Initialize ();
		}

		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public unsafe new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("priv"
							, GLib.Object.abi_info.Fields
							, (uint) sizeof( IntPtr ) // priv
							, null
							, null
							, (uint) sizeof(IntPtr)
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
