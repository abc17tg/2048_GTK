// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace WebKit {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct InputMethodUnderline : IEquatable<InputMethodUnderline> {


		public static WebKit.InputMethodUnderline Zero = new WebKit.InputMethodUnderline ();

		public static WebKit.InputMethodUnderline New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return WebKit.InputMethodUnderline.Zero;
			return (WebKit.InputMethodUnderline) Marshal.PtrToStructure (raw, typeof (WebKit.InputMethodUnderline));
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_webkit_input_method_underline_new(uint start_offset, uint end_offset);
		static d_webkit_input_method_underline_new webkit_input_method_underline_new = FuncLoader.LoadFunction<d_webkit_input_method_underline_new>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_input_method_underline_new"));

		public static InputMethodUnderline New(uint start_offset, uint end_offset)
		{
			InputMethodUnderline result = InputMethodUnderline.New (webkit_input_method_underline_new(start_offset, end_offset));
			return result;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_webkit_input_method_underline_get_type();
		static d_webkit_input_method_underline_get_type webkit_input_method_underline_get_type = FuncLoader.LoadFunction<d_webkit_input_method_underline_get_type>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_input_method_underline_get_type"));

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = webkit_input_method_underline_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_webkit_input_method_underline_set_color(IntPtr raw, IntPtr value);
		static d_webkit_input_method_underline_set_color webkit_input_method_underline_set_color = FuncLoader.LoadFunction<d_webkit_input_method_underline_set_color>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_input_method_underline_set_color"));

		public Gdk.RGBA Color { 
			set {
				IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf<WebKit.InputMethodUnderline>());
				System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
				IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
				webkit_input_method_underline_set_color(this_as_native, native_value);
				ReadNative (this_as_native, ref this);
				System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
				Marshal.FreeHGlobal (native_value);
			}
		}

		static void ReadNative (IntPtr native, ref WebKit.InputMethodUnderline target)
		{
			target = New (native);
		}

		public bool Equals (InputMethodUnderline other)
		{
			return true;
		}

		public override bool Equals (object other)
		{
			return other is InputMethodUnderline && Equals ((InputMethodUnderline) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode ();
		}

		public static explicit operator GLib.Value (WebKit.InputMethodUnderline boxed)
		{
			GLib.Value val = GLib.Value.Empty;
			val.Init (WebKit.InputMethodUnderline.GType);
			val.Val = boxed;
			return val;
		}

		public static explicit operator WebKit.InputMethodUnderline (GLib.Value val)
		{
			return (WebKit.InputMethodUnderline) val.Val;
		}
#endregion
	}
}
