// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace WebKit {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;
	using static GLib.AbiStructExtension;

#region Autogenerated code
	public partial class PrintCustomWidget : GLib.Object {

		public PrintCustomWidget (IntPtr raw) : base(raw) {}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_webkit_print_custom_widget_new(IntPtr widget, IntPtr title);
		static d_webkit_print_custom_widget_new webkit_print_custom_widget_new = FuncLoader.LoadFunction<d_webkit_print_custom_widget_new>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_print_custom_widget_new"));

		public PrintCustomWidget (Gtk.Widget widget, string title) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (PrintCustomWidget)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				if (widget != null) {
					names.Add ("widget");
					vals.Add (new GLib.Value (widget));
				}
				names.Add ("title");
				vals.Add (new GLib.Value (title));
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			IntPtr native_title = GLib.Marshaller.StringToPtrGStrdup (title);
			Raw = webkit_print_custom_widget_new(widget == null ? IntPtr.Zero : widget.Handle, native_title);
			GLib.Marshaller.Free (native_title);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_webkit_print_custom_widget_get_title(IntPtr raw);
		static d_webkit_print_custom_widget_get_title webkit_print_custom_widget_get_title = FuncLoader.LoadFunction<d_webkit_print_custom_widget_get_title>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_print_custom_widget_get_title"));

		[GLib.Property ("title")]
		public string Title {
			get  {
				IntPtr raw_ret = webkit_print_custom_widget_get_title(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_webkit_print_custom_widget_get_widget(IntPtr raw);
		static d_webkit_print_custom_widget_get_widget webkit_print_custom_widget_get_widget = FuncLoader.LoadFunction<d_webkit_print_custom_widget_get_widget>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_print_custom_widget_get_widget"));

		[GLib.Property ("widget")]
		public Gtk.Widget Widget {
			get  {
				IntPtr raw_ret = webkit_print_custom_widget_get_widget(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
		}

		[GLib.Signal("update")]
		public event WebKit.UpdateHandler Update {
			add {
				this.AddSignalHandler ("update", value, typeof (WebKit.UpdateArgs));
			}
			remove {
				this.RemoveSignalHandler ("update", value);
			}
		}

		[GLib.Signal("apply")]
		public event System.EventHandler Apply {
			add {
				this.AddSignalHandler ("apply", value);
			}
			remove {
				this.RemoveSignalHandler ("apply", value);
			}
		}

		static ApplyNativeDelegate Apply_cb_delegate;
		static ApplyNativeDelegate ApplyVMCallback {
			get {
				if (Apply_cb_delegate == null)
					Apply_cb_delegate = new ApplyNativeDelegate (Apply_cb);
				return Apply_cb_delegate;
			}
		}

		static void OverrideApply (GLib.GType gtype)
		{
			OverrideApply (gtype, ApplyVMCallback);
		}

		static void OverrideApply (GLib.GType gtype, ApplyNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("apply"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate(callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ApplyNativeDelegate (IntPtr inst);

		static void Apply_cb (IntPtr inst)
		{
			try {
				PrintCustomWidget __obj = GLib.Object.GetObject (inst, false) as PrintCustomWidget;
				__obj.OnApply ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(WebKit.PrintCustomWidget), ConnectionMethod="OverrideApply")]
		protected virtual void OnApply ()
		{
			InternalApply ();
		}

		private void InternalApply ()
		{
			ApplyNativeDelegate unmanaged = class_abi.BaseOverride<ApplyNativeDelegate>(this.LookupGType(), "apply");
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static UpdateNativeDelegate Update_cb_delegate;
		static UpdateNativeDelegate UpdateVMCallback {
			get {
				if (Update_cb_delegate == null)
					Update_cb_delegate = new UpdateNativeDelegate (Update_cb);
				return Update_cb_delegate;
			}
		}

		static void OverrideUpdate (GLib.GType gtype)
		{
			OverrideUpdate (gtype, UpdateVMCallback);
		}

		static void OverrideUpdate (GLib.GType gtype, UpdateNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("update"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate(callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void UpdateNativeDelegate (IntPtr inst, IntPtr page_setup, IntPtr print_settings);

		static void Update_cb (IntPtr inst, IntPtr page_setup, IntPtr print_settings)
		{
			try {
				PrintCustomWidget __obj = GLib.Object.GetObject (inst, false) as PrintCustomWidget;
				__obj.OnUpdate (GLib.Object.GetObject(page_setup) as Gtk.PageSetup, GLib.Object.GetObject(print_settings) as Gtk.PrintSettings);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(WebKit.PrintCustomWidget), ConnectionMethod="OverrideUpdate")]
		protected virtual void OnUpdate (Gtk.PageSetup page_setup, Gtk.PrintSettings print_settings)
		{
			InternalUpdate (page_setup, print_settings);
		}

		private void InternalUpdate (Gtk.PageSetup page_setup, Gtk.PrintSettings print_settings)
		{
			UpdateNativeDelegate unmanaged = class_abi.BaseOverride<UpdateNativeDelegate>(this.LookupGType(), "update");
			if (unmanaged == null) return;

			unmanaged (this.Handle, page_setup == null ? IntPtr.Zero : page_setup.Handle, print_settings == null ? IntPtr.Zero : print_settings.Handle);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public unsafe new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("apply"
							, GLib.Object.class_abi.Fields
							, (uint) sizeof( IntPtr ) // apply
							, null
							, "update"
							, (uint) sizeof(IntPtr)
							, 0
							),
						new GLib.AbiField("update"
							, -1
							, (uint) sizeof( IntPtr ) // update
							, "apply"
							, "_webkit_reserved0"
							, (uint) sizeof(IntPtr)
							, 0
							),
						new GLib.AbiField("_webkit_reserved0"
							, -1
							, (uint) sizeof( IntPtr ) // _webkit_reserved0
							, "update"
							, "_webkit_reserved1"
							, (uint) sizeof(IntPtr)
							, 0
							),
						new GLib.AbiField("_webkit_reserved1"
							, -1
							, (uint) sizeof( IntPtr ) // _webkit_reserved1
							, "_webkit_reserved0"
							, "_webkit_reserved2"
							, (uint) sizeof(IntPtr)
							, 0
							),
						new GLib.AbiField("_webkit_reserved2"
							, -1
							, (uint) sizeof( IntPtr ) // _webkit_reserved2
							, "_webkit_reserved1"
							, "_webkit_reserved3"
							, (uint) sizeof(IntPtr)
							, 0
							),
						new GLib.AbiField("_webkit_reserved3"
							, -1
							, (uint) sizeof( IntPtr ) // _webkit_reserved3
							, "_webkit_reserved2"
							, null
							, (uint) sizeof(IntPtr)
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_webkit_print_custom_widget_get_type();
		static d_webkit_print_custom_widget_get_type webkit_print_custom_widget_get_type = FuncLoader.LoadFunction<d_webkit_print_custom_widget_get_type>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_print_custom_widget_get_type"));

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = webkit_print_custom_widget_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}


		static PrintCustomWidget ()
		{
			GtkSharp.WebkitGtkSharp.ObjectManager.Initialize ();
		}

		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public unsafe new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("priv"
							, GLib.Object.abi_info.Fields
							, (uint) sizeof( IntPtr ) // priv
							, null
							, null
							, (uint) sizeof(IntPtr)
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
