// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace WebKit {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;
	using static GLib.AbiStructExtension;

#region Autogenerated code
	public partial class Notification : GLib.Object {

		public Notification (IntPtr raw) : base(raw) {}

		protected Notification() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_webkit_notification_get_body(IntPtr raw);
		static d_webkit_notification_get_body webkit_notification_get_body = FuncLoader.LoadFunction<d_webkit_notification_get_body>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_notification_get_body"));

		[GLib.Property ("body")]
		public string Body {
			get  {
				IntPtr raw_ret = webkit_notification_get_body(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate ulong d_webkit_notification_get_id(IntPtr raw);
		static d_webkit_notification_get_id webkit_notification_get_id = FuncLoader.LoadFunction<d_webkit_notification_get_id>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_notification_get_id"));

		[GLib.Property ("id")]
		public ulong Id {
			get  {
				ulong raw_ret = webkit_notification_get_id(Handle);
				ulong ret = raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_webkit_notification_get_tag(IntPtr raw);
		static d_webkit_notification_get_tag webkit_notification_get_tag = FuncLoader.LoadFunction<d_webkit_notification_get_tag>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_notification_get_tag"));

		[GLib.Property ("tag")]
		public string Tag {
			get  {
				IntPtr raw_ret = webkit_notification_get_tag(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_webkit_notification_get_title(IntPtr raw);
		static d_webkit_notification_get_title webkit_notification_get_title = FuncLoader.LoadFunction<d_webkit_notification_get_title>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_notification_get_title"));

		[GLib.Property ("title")]
		public string Title {
			get  {
				IntPtr raw_ret = webkit_notification_get_title(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[GLib.Signal("clicked")]
		public event System.EventHandler ClickedEvent {
			add {
				this.AddSignalHandler ("clicked", value);
			}
			remove {
				this.RemoveSignalHandler ("clicked", value);
			}
		}

		[GLib.Signal("closed")]
		public event System.EventHandler Closed {
			add {
				this.AddSignalHandler ("closed", value);
			}
			remove {
				this.RemoveSignalHandler ("closed", value);
			}
		}

		static ClickedEventNativeDelegate ClickedEvent_cb_delegate;
		static ClickedEventNativeDelegate ClickedEventVMCallback {
			get {
				if (ClickedEvent_cb_delegate == null)
					ClickedEvent_cb_delegate = new ClickedEventNativeDelegate (ClickedEvent_cb);
				return ClickedEvent_cb_delegate;
			}
		}

		static void OverrideClickedEvent (GLib.GType gtype)
		{
			OverrideClickedEvent (gtype, ClickedEventVMCallback);
		}

		static void OverrideClickedEvent (GLib.GType gtype, ClickedEventNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "clicked", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ClickedEventNativeDelegate (IntPtr inst);

		static void ClickedEvent_cb (IntPtr inst)
		{
			try {
				Notification __obj = GLib.Object.GetObject (inst, false) as Notification;
				__obj.OnClickedEvent ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(WebKit.Notification), ConnectionMethod="OverrideClickedEvent")]
		protected virtual void OnClickedEvent ()
		{
			InternalClickedEvent ();
		}

		private void InternalClickedEvent ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static ClosedNativeDelegate Closed_cb_delegate;
		static ClosedNativeDelegate ClosedVMCallback {
			get {
				if (Closed_cb_delegate == null)
					Closed_cb_delegate = new ClosedNativeDelegate (Closed_cb);
				return Closed_cb_delegate;
			}
		}

		static void OverrideClosed (GLib.GType gtype)
		{
			OverrideClosed (gtype, ClosedVMCallback);
		}

		static void OverrideClosed (GLib.GType gtype, ClosedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "closed", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ClosedNativeDelegate (IntPtr inst);

		static void Closed_cb (IntPtr inst)
		{
			try {
				Notification __obj = GLib.Object.GetObject (inst, false) as Notification;
				__obj.OnClosed ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(WebKit.Notification), ConnectionMethod="OverrideClosed")]
		protected virtual void OnClosed ()
		{
			InternalClosed ();
		}

		private void InternalClosed ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public unsafe new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("_webkit_reserved0"
							, GLib.Object.class_abi.Fields
							, (uint) sizeof( IntPtr ) // _webkit_reserved0
							, null
							, "_webkit_reserved1"
							, (uint) sizeof(IntPtr)
							, 0
							),
						new GLib.AbiField("_webkit_reserved1"
							, -1
							, (uint) sizeof( IntPtr ) // _webkit_reserved1
							, "_webkit_reserved0"
							, "_webkit_reserved2"
							, (uint) sizeof(IntPtr)
							, 0
							),
						new GLib.AbiField("_webkit_reserved2"
							, -1
							, (uint) sizeof( IntPtr ) // _webkit_reserved2
							, "_webkit_reserved1"
							, "_webkit_reserved3"
							, (uint) sizeof(IntPtr)
							, 0
							),
						new GLib.AbiField("_webkit_reserved3"
							, -1
							, (uint) sizeof( IntPtr ) // _webkit_reserved3
							, "_webkit_reserved2"
							, "_webkit_reserved4"
							, (uint) sizeof(IntPtr)
							, 0
							),
						new GLib.AbiField("_webkit_reserved4"
							, -1
							, (uint) sizeof( IntPtr ) // _webkit_reserved4
							, "_webkit_reserved3"
							, "_webkit_reserved5"
							, (uint) sizeof(IntPtr)
							, 0
							),
						new GLib.AbiField("_webkit_reserved5"
							, -1
							, (uint) sizeof( IntPtr ) // _webkit_reserved5
							, "_webkit_reserved4"
							, null
							, (uint) sizeof(IntPtr)
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_webkit_notification_get_type();
		static d_webkit_notification_get_type webkit_notification_get_type = FuncLoader.LoadFunction<d_webkit_notification_get_type>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_notification_get_type"));

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = webkit_notification_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_webkit_notification_clicked(IntPtr raw);
		static d_webkit_notification_clicked webkit_notification_clicked = FuncLoader.LoadFunction<d_webkit_notification_clicked>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_notification_clicked"));

		public void Clicked() {
			webkit_notification_clicked(Handle);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_webkit_notification_close(IntPtr raw);
		static d_webkit_notification_close webkit_notification_close = FuncLoader.LoadFunction<d_webkit_notification_close>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_notification_close"));

		public void Close() {
			webkit_notification_close(Handle);
		}


		static Notification ()
		{
			GtkSharp.WebkitGtkSharp.ObjectManager.Initialize ();
		}

		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public unsafe new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("priv"
							, GLib.Object.abi_info.Fields
							, (uint) sizeof( IntPtr ) // priv
							, null
							, null
							, (uint) sizeof(IntPtr)
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
