// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace WebKit {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;
	using static GLib.AbiStructExtension;

#region Autogenerated code
	public partial class Global {

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int d_webkit_download_error_quark();
		static d_webkit_download_error_quark webkit_download_error_quark = FuncLoader.LoadFunction<d_webkit_download_error_quark>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_download_error_quark"));

		public static int DownloadErrorQuark() {
			int raw_ret = webkit_download_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int d_webkit_favicon_database_error_quark();
		static d_webkit_favicon_database_error_quark webkit_favicon_database_error_quark = FuncLoader.LoadFunction<d_webkit_favicon_database_error_quark>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_favicon_database_error_quark"));

		public static int FaviconDatabaseErrorQuark() {
			int raw_ret = webkit_favicon_database_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate uint d_webkit_get_major_version();
		static d_webkit_get_major_version webkit_get_major_version = FuncLoader.LoadFunction<d_webkit_get_major_version>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_get_major_version"));

		public static uint MajorVersion { 
			get {
				uint raw_ret = webkit_get_major_version();
				uint ret = raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate uint d_webkit_get_micro_version();
		static d_webkit_get_micro_version webkit_get_micro_version = FuncLoader.LoadFunction<d_webkit_get_micro_version>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_get_micro_version"));

		public static uint MicroVersion { 
			get {
				uint raw_ret = webkit_get_micro_version();
				uint ret = raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate uint d_webkit_get_minor_version();
		static d_webkit_get_minor_version webkit_get_minor_version = FuncLoader.LoadFunction<d_webkit_get_minor_version>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_get_minor_version"));

		public static uint MinorVersion { 
			get {
				uint raw_ret = webkit_get_minor_version();
				uint ret = raw_ret;
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int d_webkit_javascript_error_quark();
		static d_webkit_javascript_error_quark webkit_javascript_error_quark = FuncLoader.LoadFunction<d_webkit_javascript_error_quark>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_javascript_error_quark"));

		public static int JavascriptErrorQuark() {
			int raw_ret = webkit_javascript_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_webkit_media_key_system_permission_get_name(IntPtr request);
		static d_webkit_media_key_system_permission_get_name webkit_media_key_system_permission_get_name = FuncLoader.LoadFunction<d_webkit_media_key_system_permission_get_name>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_media_key_system_permission_get_name"));

		public static string MediaKeySystemPermissionGetName(WebKit.MediaKeySystemPermissionRequest request) {
			IntPtr raw_ret = webkit_media_key_system_permission_get_name(request == null ? IntPtr.Zero : request.Handle);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int d_webkit_network_error_quark();
		static d_webkit_network_error_quark webkit_network_error_quark = FuncLoader.LoadFunction<d_webkit_network_error_quark>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_network_error_quark"));

		public static int NetworkErrorQuark() {
			int raw_ret = webkit_network_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int d_webkit_plugin_error_quark();
		static d_webkit_plugin_error_quark webkit_plugin_error_quark = FuncLoader.LoadFunction<d_webkit_plugin_error_quark>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_plugin_error_quark"));

		public static int PluginErrorQuark() {
			int raw_ret = webkit_plugin_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int d_webkit_policy_error_quark();
		static d_webkit_policy_error_quark webkit_policy_error_quark = FuncLoader.LoadFunction<d_webkit_policy_error_quark>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_policy_error_quark"));

		public static int PolicyErrorQuark() {
			int raw_ret = webkit_policy_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int d_webkit_print_error_quark();
		static d_webkit_print_error_quark webkit_print_error_quark = FuncLoader.LoadFunction<d_webkit_print_error_quark>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_print_error_quark"));

		public static int PrintErrorQuark() {
			int raw_ret = webkit_print_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int d_webkit_snapshot_error_quark();
		static d_webkit_snapshot_error_quark webkit_snapshot_error_quark = FuncLoader.LoadFunction<d_webkit_snapshot_error_quark>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_snapshot_error_quark"));

		public static int SnapshotErrorQuark() {
			int raw_ret = webkit_snapshot_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_webkit_uri_for_display(IntPtr uri);
		static d_webkit_uri_for_display webkit_uri_for_display = FuncLoader.LoadFunction<d_webkit_uri_for_display>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_uri_for_display"));

		public static string UriForDisplay(string uri) {
			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
			IntPtr raw_ret = webkit_uri_for_display(native_uri);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			GLib.Marshaller.Free (native_uri);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int d_webkit_user_content_filter_error_quark();
		static d_webkit_user_content_filter_error_quark webkit_user_content_filter_error_quark = FuncLoader.LoadFunction<d_webkit_user_content_filter_error_quark>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_user_content_filter_error_quark"));

		public static int UserContentFilterErrorQuark() {
			int raw_ret = webkit_user_content_filter_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_webkit_user_media_permission_is_for_audio_device(IntPtr request);
		static d_webkit_user_media_permission_is_for_audio_device webkit_user_media_permission_is_for_audio_device = FuncLoader.LoadFunction<d_webkit_user_media_permission_is_for_audio_device>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_user_media_permission_is_for_audio_device"));

		public static bool UserMediaPermissionIsForAudioDevice(WebKit.UserMediaPermissionRequest request) {
			bool raw_ret = webkit_user_media_permission_is_for_audio_device(request == null ? IntPtr.Zero : request.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_webkit_user_media_permission_is_for_video_device(IntPtr request);
		static d_webkit_user_media_permission_is_for_video_device webkit_user_media_permission_is_for_video_device = FuncLoader.LoadFunction<d_webkit_user_media_permission_is_for_video_device>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_user_media_permission_is_for_video_device"));

		public static bool UserMediaPermissionIsForVideoDevice(WebKit.UserMediaPermissionRequest request) {
			bool raw_ret = webkit_user_media_permission_is_for_video_device(request == null ? IntPtr.Zero : request.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int d_webkit_user_message_error_quark();
		static d_webkit_user_message_error_quark webkit_user_message_error_quark = FuncLoader.LoadFunction<d_webkit_user_message_error_quark>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Webkit), "webkit_user_message_error_quark"));

		public static int UserMessageErrorQuark() {
			int raw_ret = webkit_user_message_error_quark();
			int ret = raw_ret;
			return ret;
		}

#endregion
	}
}
